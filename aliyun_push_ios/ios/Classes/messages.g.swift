// Autogenerated from Pigeon (v18.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AliyunPushIosApi {
  func initPush(appKey: String?, appSecret: String?, completion: @escaping (Result<Void, Error>) -> Void)
  func addAlias(alias: String, completion: @escaping (Result<Void, Error>) -> Void)
  func listAlias(completion: @escaping (Result<[String], Error>) -> Void)
  func removeAlias(alias: String, completion: @escaping (Result<Void, Error>) -> Void)
  func bindAccount(account: String, completion: @escaping (Result<Void, Error>) -> Void)
  func bindTag(tags: [String], target: Int64, alias: String?, completion: @escaping (Result<Void, Error>) -> Void)
  func unbindTag(tags: [String], target: Int64, alias: String?, completion: @escaping (Result<Void, Error>) -> Void)
  func listTags(target: Int64, completion: @escaping (Result<[String], Error>) -> Void)
  func getDeviceToken(completion: @escaping (Result<String, Error>) -> Void)
  func getDeviceId(completion: @escaping (Result<String, Error>) -> Void)
  func isIOSChannelOpened(completion: @escaping (Result<Bool, Error>) -> Void)
  func setBadgeNum(num: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func showNoticeWhenForeground(enable: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func syncBadgeNum(num: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func turnOnDebug(completion: @escaping (Result<Void, Error>) -> Void)
  func unbindAccount(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AliyunPushIosApiSetup {
  /// The codec used by AliyunPushIosApi.
  /// Sets up an instance of `AliyunPushIosApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AliyunPushIosApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initPushChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.initPush\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      initPushChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appKeyArg: String? = nilOrValue(args[0])
        let appSecretArg: String? = nilOrValue(args[1])
        api.initPush(appKey: appKeyArg, appSecret: appSecretArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initPushChannel.setMessageHandler(nil)
    }
    let addAliasChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.addAlias\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      addAliasChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aliasArg = args[0] as! String
        api.addAlias(alias: aliasArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      addAliasChannel.setMessageHandler(nil)
    }
    let listAliasChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.listAlias\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      listAliasChannel.setMessageHandler { _, reply in
        api.listAlias { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      listAliasChannel.setMessageHandler(nil)
    }
    let removeAliasChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.removeAlias\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      removeAliasChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aliasArg = args[0] as! String
        api.removeAlias(alias: aliasArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      removeAliasChannel.setMessageHandler(nil)
    }
    let bindAccountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.bindAccount\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      bindAccountChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let accountArg = args[0] as! String
        api.bindAccount(account: accountArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      bindAccountChannel.setMessageHandler(nil)
    }
    let bindTagChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.bindTag\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      bindTagChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let tagsArg = args[0] as! [String]
        let targetArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        let aliasArg: String? = nilOrValue(args[2])
        api.bindTag(tags: tagsArg, target: targetArg, alias: aliasArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      bindTagChannel.setMessageHandler(nil)
    }
    let unbindTagChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.unbindTag\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      unbindTagChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let tagsArg = args[0] as! [String]
        let targetArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        let aliasArg: String? = nilOrValue(args[2])
        api.unbindTag(tags: tagsArg, target: targetArg, alias: aliasArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      unbindTagChannel.setMessageHandler(nil)
    }
    let listTagsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.listTags\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      listTagsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let targetArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        api.listTags(target: targetArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      listTagsChannel.setMessageHandler(nil)
    }
    let getApnsDeviceTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.getApnsDeviceToken\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      getApnsDeviceTokenChannel.setMessageHandler { _, reply in
        api.getDeviceToken { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getApnsDeviceTokenChannel.setMessageHandler(nil)
    }
    let getDeviceIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.getDeviceId\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      getDeviceIdChannel.setMessageHandler { _, reply in
        api.getDeviceId { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getDeviceIdChannel.setMessageHandler(nil)
    }
    let isIOSChannelOpenedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.isIOSChannelOpened\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      isIOSChannelOpenedChannel.setMessageHandler { _, reply in
        api.isIOSChannelOpened { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      isIOSChannelOpenedChannel.setMessageHandler(nil)
    }
    let setIOSBadgeNumChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.setIOSBadgeNum\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      setIOSBadgeNumChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let numArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        api.setBadgeNum(num: numArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setIOSBadgeNumChannel.setMessageHandler(nil)
    }
    let showIOSNoticeWhenForegroundChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.showIOSNoticeWhenForeground\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      showIOSNoticeWhenForegroundChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enableArg = args[0] as! Bool
        api.showNoticeWhenForeground(enable: enableArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      showIOSNoticeWhenForegroundChannel.setMessageHandler(nil)
    }
    let syncIOSBadgeNumChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.syncIOSBadgeNum\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      syncIOSBadgeNumChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let numArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        api.syncBadgeNum(num: numArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      syncIOSBadgeNumChannel.setMessageHandler(nil)
    }
    let turnOnIOSDebugChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.turnOnIOSDebug\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      turnOnIOSDebugChannel.setMessageHandler { _, reply in
        api.turnOnDebug { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      turnOnIOSDebugChannel.setMessageHandler(nil)
    }
    let unbindAccountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.aliyun_push_ios.AliyunPushIosApi.unbindAccount\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      unbindAccountChannel.setMessageHandler { _, reply in
        api.unbindAccount { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      unbindAccountChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol AliyunPushFlutterApiProtocol {
  func onNotificationOpened(map mapArg: [AnyHashable: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onNotificationRemoved(map mapArg: [AnyHashable: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onNotification(map mapArg: [AnyHashable: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onMessage(map mapArg: [AnyHashable: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onChannelOpened(completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onRegisterDeviceTokenSuccess(token tokenArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onRegisterDeviceTokenFailed(error errorArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class AliyunPushFlutterApi: AliyunPushFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  func onNotificationOpened(map mapArg: [AnyHashable: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.aliyun_push_ios.AliyunPushFlutterApi.onNotificationOpened\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([mapArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onNotificationRemoved(map mapArg: [AnyHashable: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.aliyun_push_ios.AliyunPushFlutterApi.onNotificationRemoved\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([mapArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onNotification(map mapArg: [AnyHashable: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.aliyun_push_ios.AliyunPushFlutterApi.onNotification\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([mapArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onMessage(map mapArg: [AnyHashable: Any?], completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.aliyun_push_ios.AliyunPushFlutterApi.onMessage\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([mapArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onChannelOpened(completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.aliyun_push_ios.AliyunPushFlutterApi.onChannelOpened\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onRegisterDeviceTokenSuccess(token tokenArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.aliyun_push_ios.AliyunPushFlutterApi.onRegisterDeviceTokenSuccess\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([tokenArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onRegisterDeviceTokenFailed(error errorArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.aliyun_push_ios.AliyunPushFlutterApi.onRegisterDeviceTokenFailed\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
